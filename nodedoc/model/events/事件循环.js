/**
 * 进程 process : 计算机启动的程序 （一个程序，可以存在多个进程）
 * 线程 thread : 操作系统能够运行运算调度的最小小单位（一个进程有多个线程）
 *
 * JavaScript的事件循环
 * 浏览器是多进程，每个tab页都是一个进程，只分一个线程执行JavaScript代码
 *      所以js的异步，就是在执行这个线程的时候
 *          遇到Ajax，浏览器的http 请求线程出来做事
 *          遇到onclick,浏览器的 浏览器事件触发线程 出来做事
 *          遇到定时器，浏览器的定时器线程就出来做事，主JavaScript进程继续工作，所有不会阻塞
 *          ... 更多的异步操作
 *          这个过程中，Ajax请求如果回来了，会被赛到一个任务队列，定时器事件到了，也会赛到任务队列中，存在顺序
 *
 *      遇到promise这种微任务，会被then的操作（放到当前执行的末尾 || 放到微任务队列，微任务队列比宏队列优先)
 *          new Promise 里的代码，详单与 await xxx  函数中的代码
 *          .then() 里面的代码，相当于 await xxx() 后面的代码
 *          主动创建微任务 queueMicrotask(()=>{console.log('micro')})
 *
 *      因为不会阻塞，主进程js代码是会执行完的
 *          当主进程执行完成，会先执行微任务，类似 then 后面的代码
 *              如果微任务中有宏任务,等时机到了也会追加到宏任务队列后面
 *          微任务执行完，执行宏任务队列
 *              如果过程中出现微任务，又会加入到微任务队列中，微任务再次空了，才会执行后面的宏任务事件
 *
 * Node的事件循环
 *      docs -> server-nodejs.md
 *      lzo-duyi-sdk -> nodejs 1-12、Node的事件循环
 *
 * 就会开启第二轮循环，读取任务队列的操作，一次一次的进行执行，就叫事件循环
 */
